name: WordPress.org Plugin Attestation
description: Generates an attestation for the build provenance of a plugin published on WordPress.org
author: johnbillion
branding:
  icon: check-circle
  color: green

inputs:
  plugin:
    description: The plugin slug
    required: false
    type: string
    default: ${{ github.event.repository.name }}
  version:
    description: The version number of the release
    required: false
    type: string
    default: ${{ github.ref_name }}
  zip-path:
    description: The path to the plugin zip file
    required: true
    type: string
  timeout:
    description: The maximum time in minutes to wait for the plugin zip to become available on WordPress.org
    required: false
    type: number
    default: 60
  dry-run:
    description: Set this to true to skip generating the actual attestation
    required: false
    type: boolean
    default: false

runs:
  using: composite
  steps:
    - name: Debug
      run: | #shell
        echo '${{ toJSON(inputs) }}'
      shell: bash

    # This fetches the zipped plugin from w.org. The zip might not exist yet if the plugin uses release confirmation
    # and the release hasn't been confirmed. This will retry until the zip is available or the timeout is reached.
    - name: Fetch ZIP from WordPress.org
      run: | #shell
        zipurl="https://downloads.wordpress.org/plugin/${{ inputs.plugin }}.${{ inputs.version }}.zip"
        echo "Fetching plugin ZIP from $zipurl ..."
        elapsed=0
        sleep=20
        per_minute=$((60 / $sleep))
        max_retries=$(( ${{ inputs.timeout }} * $per_minute ))

        while [ $elapsed -lt $max_retries ]; do
          # Perform a HEAD request to check if the ZIP is available
          status_code=$(curl -s -o /dev/null -w "%{http_code}" -I "$zipurl")
          if [ "$status_code" -eq 200 ]; then
            curl -s -o "${{ inputs.plugin }}.zip" "$zipurl"
            break
          else
            echo "Plugin ZIP not available yet (HTTP status $status_code), retrying in $sleep seconds..."
            sleep $sleep
            elapsed=$((elapsed + 1))
          fi
        done

        if [ $elapsed -ge $max_retries ]; then
          echo "Error: ${{ inputs.timeout }} minute timeout reached. Plugin ZIP not available."
          exit 1
        fi
      shell: bash

    # Now compare the contents of the generated zip and the w.org zip to ensure they match. Only then can we attest the w.org zip.
    - name: Unzip ${{ inputs.plugin }}.zip from WordPress.org
      run: | #shell
        unzip -q -d zip-org "${{ inputs.plugin }}.zip"
      shell: bash

    - name: Unzip the generated zip
      run: | #shell
        unzip -q -d zip-generated "${{ inputs.zip-path }}"
      shell: bash

    - name: Ensure the directories are identical
      run: | #shell
        diff -r zip-generated zip-org
      shell: bash

    - name: Generate GitHub build provenance attestation
      if: ${{ inputs.dry-run == 'false' }}
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: "${{ github.workspace }}/${{ inputs.plugin }}.zip"
        subject-name: "wordpress.org-${{ inputs.plugin }}-${{ inputs.version }}"

    - name: Check the attestation
      if: ${{ inputs.dry-run == 'false' }}
      run: | #shell
        gh attestation verify "${{ inputs.plugin }}.zip" --repo "${{ github.repository }}"
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Output the subjects as a file
      run: | #shell
        sha256sum "${{ inputs.plugin }}.zip" | base64 -w0 > base64-subjects.txt
      shell: bash

    - name: Output the hashes as a file
      uses: slsa-framework/slsa-github-generator/actions/generator/generic/create-base64-subjects-from-file@v2.0.0
      id: base64-subjects
      with:
        path: base64-subjects.txt

    - name: Generate SLSA provenance attestation
      if: ${{ inputs.dry-run == 'false' }}
      uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
      with:
        base64-subjects-as-file: "${{ jobs.base64-subjects.outputs.handle }}"

    - name: Upload the WordPress.org zip file as an artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.plugin }}.zip
        if-no-files-found: error
