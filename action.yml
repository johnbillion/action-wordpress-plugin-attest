name: WordPress Plugin Attestation
description: Generates an attestation for the build provenance of a plugin published on the WordPress.org plugin directory
author: johnbillion
branding:
  icon: check-circle
  color: green

inputs:
  zip-path:
    description: The local path to the plugin ZIP file.
    required: true
    type: string
  plugin:
    description: Optional. The plugin slug.
    required: false
    type: string
    default: ${{ github.event.repository.name }}
  version:
    description: Optional. The version number of the release.
    required: false
    type: string
    default: ${{ github.ref_name }}
  timeout:
    description: Optional. The maximum time in minutes to wait for the plugin ZIP to become available in the plugin directory.
    required: false
    type: number
    default: 60
  zip-url:
    description: Optional. The URL where the plugin ZIP file is hosted (for platforms other than WordPress.org).
    required: false
    type: string
    default: 'https://downloads.wordpress.org/plugin/%plugin%.%version%.zip'
  dry-run:
    description: Optional. Set this to true to skip generating the actual attestation.
    required: false
    type: boolean
    default: false

runs:
  using: composite
  steps:
    - name: Debug
      run: | #shell
        echo '${{ toJSON(inputs) }}'
      shell: bash

    # This fetches the zipped plugin from the plugin directory. The ZIP might not exist yet if the plugin uses release confirmation
    # and the release hasn't been confirmed. This will retry until the ZIP is available or the timeout is reached.
    - name: Fetch ZIP from the plugin directory
      env:
        PLUGIN: ${{ inputs.plugin }}
        VERSION: ${{ inputs.version }}
        ZIP_URL: ${{ inputs.zip-url }}
        TIMEOUT: ${{ inputs.timeout }}
      run: | #shell
        zipurl="$ZIP_URL"
        zipurl=${zipurl//%plugin%/$PLUGIN}
        zipurl=${zipurl//%version%/$VERSION}

        echo PLUGIN_HOST="$(echo "$zipurl" | awk -F/ '{print $3}')" >> "$GITHUB_ENV"

        echo "Fetching plugin ZIP from $zipurl ..."
        elapsed=0
        sleep=20
        per_minute=$((60 / $sleep))
        max_retries=$(( ${TIMEOUT} * $per_minute ))

        while [ $elapsed -lt $max_retries ]; do
          # Perform a HEAD request to check if the ZIP is available
          status_code=$(curl -s -o /dev/null -w "%{http_code}" -I "$zipurl")
          if [ "$status_code" -eq 200 ]; then
            curl -s -o "${PLUGIN}.zip" "$zipurl"
            break
          else
            echo "Plugin ZIP not available yet (HTTP status $status_code), retrying in $sleep seconds..."
            sleep $sleep
            elapsed=$((elapsed + 1))
          fi
        done

        if [ $elapsed -ge $max_retries ]; then
          echo "Error: ${TIMEOUT} minute timeout reached. Plugin ZIP not available."
          exit 1
        fi
      shell: bash

    # Now compare the contents of the generated ZIP and the plugin directory ZIP to ensure they match.
    # Only then can we attest the plugin directory ZIP.
    - name: Unzip the ZIP from the plugin directory
      run: | #shell
        unzip -q -d zip-org "${{ inputs.plugin }}.zip"
      shell: bash

    - name: Unzip the generated zip
      run: | #shell
        unzip -q -d zip-generated "${{ inputs.zip-path }}"
      shell: bash

    - name: Ensure the directories are identical
      run: | #shell
        diff -r zip-generated zip-org
      shell: bash

    - name: Generate attestation for the plugin
      if: ${{ inputs.dry-run == 'false' }}
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: "${{ github.workspace }}/${{ inputs.plugin }}.zip"
        subject-name: "wordpress.org-${{ inputs.plugin }}-${{ inputs.version }}"

    - name: Check the attestation
      if: ${{ inputs.dry-run == 'false' }}
      run: | #shell
        gh attestation verify "${{ inputs.plugin }}.zip" --owner "${{ github.repository_owner }}"
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
